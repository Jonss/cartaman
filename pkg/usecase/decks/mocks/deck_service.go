// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Jonss/cartaman/pkg/usecase/decks (interfaces: DeckService)

// Package mock_decks is a generated GoMock package.
package mock_decks

import (
	context "context"
	reflect "reflect"

	decks "github.com/Jonss/cartaman/pkg/usecase/decks"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockDeckService is a mock of DeckService interface.
type MockDeckService struct {
	ctrl     *gomock.Controller
	recorder *MockDeckServiceMockRecorder
}

// MockDeckServiceMockRecorder is the mock recorder for MockDeckService.
type MockDeckServiceMockRecorder struct {
	mock *MockDeckService
}

// NewMockDeckService creates a new mock instance.
func NewMockDeckService(ctrl *gomock.Controller) *MockDeckService {
	mock := &MockDeckService{ctrl: ctrl}
	mock.recorder = &MockDeckServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeckService) EXPECT() *MockDeckServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockDeckService) Create(arg0 context.Context, arg1 decks.CreateParams) (*decks.Deck, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*decks.Deck)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockDeckServiceMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDeckService)(nil).Create), arg0, arg1)
}

// Draw mocks base method.
func (m *MockDeckService) Draw(arg0 context.Context, arg1 uuid.UUID, arg2 int) ([]decks.Card, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Draw", arg0, arg1, arg2)
	ret0, _ := ret[0].([]decks.Card)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Draw indicates an expected call of Draw.
func (mr *MockDeckServiceMockRecorder) Draw(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Draw", reflect.TypeOf((*MockDeckService)(nil).Draw), arg0, arg1, arg2)
}

// Open mocks base method.
func (m *MockDeckService) Open(arg0 context.Context, arg1 uuid.UUID) (*decks.OpenDeck, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", arg0, arg1)
	ret0, _ := ret[0].(*decks.OpenDeck)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open.
func (mr *MockDeckServiceMockRecorder) Open(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockDeckService)(nil).Open), arg0, arg1)
}
